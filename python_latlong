import csv,os
from pyproj import Proj, CRS, transform, Transformer

# Define the input and output file paths
input_csv = 'HN_Operational.csv'
output_csv = 'HNLatLongPointsOps.csv'

# Define the transformer for coordinate conversion (OSGB36 to WGS84)
transformer = Transformer.from_crs("EPSG:27700", "EPSG:4326", always_xy=True)

# Attempt to open the input CSV file with different encodings
try:
    with open(input_csv, mode='r', encoding='latin1', errors='replace') as infile, open(output_csv, mode='w', newline='', encoding='utf-8') as outfile:
        reader = csv.reader(infile)
        writer = csv.writer(outfile)

        # Try to read the header, handle empty file cases
        try:
            header = next(reader)
        except StopIteration:
            print("Error: The input CSV file is empty or missing a header row.")
            exit(1)

        # Write the header and append 'Latitude' and 'Longitude' columns
        writer.writerow(header + ['Latitude', 'Longitude'])

        # Process each row in the CSV
        for row in reader:
            # Initialize latitude and longitude to None
            latitude, longitude = None, None

            # Try-except block to handle conversion errors
            try:
                # Extract Easting and Northing from the specified columns
                easting_str = row[11].strip()  # Get Easting value and strip whitespace
                northing_str = row[12].strip()  # Get Northing value and strip whitespace

                # Check if both Easting and Northing are not empty
                if easting_str and northing_str:  # Both should have values
                    easting = float(easting_str)  # Convert Easting to float
                    northing = float(northing_str)  # Convert Northing to float

                    # Convert Easting/Northing (OSGB36) to Latitude/Longitude (WGS84)
                    longitude, latitude = transformer.transform(easting, northing)

                    # Write the row, appending the calculated Latitude and Longitude
                    writer.writerow(row + [latitude, longitude])
                else:
                    print(f"Skipping row due to missing Easting or Northing: {row}")

            except ValueError as e:
                print(f"Error converting Easting/Northing to float: {e}. Row data: {row}")
            except IndexError as e:
                print(f"Error: {e}. Row data may not have enough columns: {row}")

except UnicodeDecodeError as e:
    print(f"Unicode decode error: {e}. Consider trying a different encoding.")
